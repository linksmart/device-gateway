{
  "swagger": "2.0",
  "info": {
    "version": "2.2.6",
    "title": "LinkSmart Service Catalog REST API"
  },
  "basePath": "/",
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "sc",
      "description": "Service Catalog"
    }
  ],
  "definitions": {
    "Service": {
      "title": "Service",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "meta": {
          "type": "object"
        },
        "apis": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "docs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "apis": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "url"
              }
            }
          }
        },
        "ttl": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "APIIndex": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          }
        },
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "per_page": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "RespBadRequest": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "RespUnauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "RespForbidden": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "RespNotfound": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "RespConflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "RespInternalServerError": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "parameters": {
    "ParamPage": {
      "name": "page",
      "in": "query",
      "description": "Page number in the pagination",
      "required": false,
      "type": "number",
      "format": "integer"
    },
    "ParamPerPage": {
      "name": "per_page",
      "in": "query",
      "description": "Number of entries per page",
      "required": false,
      "type": "number",
      "format": "integer"
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "sc"
        ],
        "summary": "Retrieves API index.",
        "parameters": [
          {
            "$ref": "#/parameters/ParamPage"
          },
          {
            "$ref": "#/parameters/ParamPerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/APIIndex"
            }
          },
          "401": {
            "$ref": "#/responses/RespUnauthorized"
          },
          "403": {
            "$ref": "#/responses/RespForbidden"
          },
          "500": {
            "$ref": "#/responses/RespInternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "sc"
        ],
        "summary": "Creates new `Service` object with a random UUID",
        "parameters": [
          {
            "name": "service",
            "description": "Service to be created",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "headers": {
              "Location": {
                "description": "URL of the newly created Service",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "$ref": "#/responses/RespBadRequest"
          },
          "401": {
            "$ref": "#/responses/RespUnauthorized"
          },
          "403": {
            "$ref": "#/responses/RespForbidden"
          },
          "500": {
            "$ref": "#/responses/RespInternalServerError"
          }
        }
      }
    },
    "/{id}": {
      "get": {
        "tags": [
          "sc"
        ],
        "summary": "Retrieves a `Service` object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the `Service`",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "$ref": "#/responses/RespBadRequest"
          },
          "401": {
            "$ref": "#/responses/RespUnauthorized"
          },
          "403": {
            "$ref": "#/responses/RespForbidden"
          },
          "404": {
            "$ref": "#/responses/RespNotfound"
          },
          "500": {
            "$ref": "#/responses/RespInternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "sc"
        ],
        "summary": "Updates the existing `Service` or creates a new one (with the provided ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the `Service`",
            "required": true,
            "type": "string"
          },
          {
            "name": "service",
            "description": "Service to be created",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service updated successfully",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "201": {
            "description": "A new service is created",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "$ref": "#/responses/RespBadRequest"
          },
          "401": {
            "$ref": "#/responses/RespUnauthorized"
          },
          "403": {
            "$ref": "#/responses/RespForbidden"
          },
          "409": {
            "$ref": "#/responses/RespConflict"
          },
          "500": {
            "$ref": "#/responses/RespInternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "sc"
        ],
        "summary": "Deletes the `Service`",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the `Service`",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "$ref": "#/responses/RespUnauthorized"
          },
          "403": {
            "$ref": "#/responses/RespForbidden"
          },
          "404": {
            "$ref": "#/responses/RespNotfound"
          },
          "500": {
            "$ref": "#/responses/RespInternalServerError"
          }
        }
      }
    },
    "/{jsonpath}/{operator}/{value}": {
      "get": {
        "tags": [
          "sc"
        ],
        "summary": "Service filtering API",
        "description": "The filtering API enables service filtering based on a given path, operator, and value. Below are few examples:\n* Filter all MQTT brokers:\n  `/name/prefix/_mqtt`\n* Filter all services operating on TCP\n  `/name/suffix/_tcp`\n* Filter all services based on address meta field:\n  `/meta.address/contains/Bonn`\n",
        "parameters": [
          {
            "name": "jsonpath",
            "in": "path",
            "description": "The dot notation path to search for in service objects",
            "required": true,
            "type": "string"
          },
          {
            "name": "operator",
            "in": "path",
            "description": "One of (equals, prefix, suffix, contains) string comparison operators",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "path",
            "description": "The intended value, prefix, suffix, or substring identified by the jsonpath",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ParamPage"
          },
          {
            "$ref": "#/parameters/ParamPerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "Succcessful response",
            "schema": {
              "$ref": "#/definitions/APIIndex"
            }
          },
          "401": {
            "$ref": "#/responses/RespUnauthorized"
          },
          "403": {
            "$ref": "#/responses/RespForbidden"
          },
          "500": {
            "$ref": "#/responses/RespInternalServerError"
          }
        }
      }
    }
  }
}